Object.defineProperty(exports, "__esModule", { value: true });
exports.webAttributionPlugin = void 0;
var tslib_1 = require("tslib");
var analytics_client_common_1 = require("@amplitude/analytics-client-common");
var analytics_types_1 = require("@amplitude/analytics-types");
var helpers_1 = require("./helpers");
var webAttributionPlugin = function () {
    var _this = this;
    var _a;
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var amplitude;
    var options = {};
    var _b = tslib_1.__read(args, 2), clientOrOptions = _b[0], configOrUndefined = _b[1];
    if (clientOrOptions && 'init' in clientOrOptions) {
        amplitude = clientOrOptions;
        if (configOrUndefined) {
            options = configOrUndefined;
        }
    }
    else if (clientOrOptions) {
        options = clientOrOptions;
    }
    var excludeReferrers = (_a = options.excludeReferrers) !== null && _a !== void 0 ? _a : [];
    if (typeof location !== 'undefined') {
        excludeReferrers.unshift(location.hostname);
    }
    options = tslib_1.__assign(tslib_1.__assign({ disabled: false, initialEmptyValue: 'EMPTY', resetSessionOnNewCampaign: false }, options), { excludeReferrers: excludeReferrers });
    var plugin = {
        name: 'web-attribution',
        type: analytics_types_1.PluginType.BEFORE,
        setup: function (config, client) {
            var _a;
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var receivedType, storage, storageKey, _b, currentCampaign, previousCampaign, pluginEnabledOverride, campaignEvent;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            amplitude = amplitude !== null && amplitude !== void 0 ? amplitude : client;
                            if (!amplitude) {
                                receivedType = clientOrOptions ? 'Options' : 'undefined';
                                config.loggerProvider.error("Argument of type '".concat(receivedType, "' is not assignable to parameter of type 'BrowserClient'."));
                                return [2 /*return*/];
                            }
                            if (options.disabled) {
                                config.loggerProvider.log('@amplitude/plugin-web-attribution-browser is disabled. Attribution is not tracked.');
                                return [2 /*return*/];
                            }
                            config.loggerProvider.log('Installing @amplitude/plugin-web-attribution-browser.');
                            if (!client && !((_a = config.attribution) === null || _a === void 0 ? void 0 : _a.disabled)) {
                                config.loggerProvider.warn('@amplitude/plugin-web-attribution-browser overrides web attribution behavior defined in @amplitude/analytics-browser. Resolve by disabling web attribution tracking in @amplitude/analytics-browser.');
                                config.attribution = {
                                    disabled: true,
                                };
                            }
                            storage = config.cookieStorage;
                            storageKey = (0, helpers_1.getStorageKey)(config.apiKey, 'MKTG');
                            return [4 /*yield*/, Promise.all([
                                    new analytics_client_common_1.CampaignParser().parse(),
                                    storage.get(storageKey),
                                ])];
                        case 1:
                            _b = tslib_1.__read.apply(void 0, [_c.sent(), 2]), currentCampaign = _b[0], previousCampaign = _b[1];
                            pluginEnabledOverride = this.__pluginEnabledOverride;
                            if (pluginEnabledOverride !== null && pluginEnabledOverride !== void 0 ? pluginEnabledOverride : (0, helpers_1.isNewCampaign)(currentCampaign, previousCampaign, options)) {
                                if (options.resetSessionOnNewCampaign) {
                                    amplitude.setSessionId(Date.now());
                                    config.loggerProvider.log('Created a new session for new campaign.');
                                }
                                config.loggerProvider.log('Tracking attribution.');
                                campaignEvent = (0, helpers_1.createCampaignEvent)(currentCampaign, options);
                                amplitude.track(campaignEvent);
                                void storage.set(storageKey, currentCampaign);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
        execute: function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, event];
        }); }); },
    };
    // For Amplitude-internal functionality
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    plugin.__pluginEnabledOverride = undefined;
    return plugin;
};
exports.webAttributionPlugin = webAttributionPlugin;
//# sourceMappingURL=web-attribution.js.map