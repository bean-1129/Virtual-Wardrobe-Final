{"version":3,"file":"default-tracking.js","sourceRoot":"","sources":["../../src/default-tracking.ts"],"names":[],"mappings":"AAQA,MAAM,CAAC,IAAM,6BAA6B,GAAG,UAAC,eAA6D;IACzG,IAAI,OAAO,eAAe,KAAK,SAAS,EAAE;QACxC,OAAO,eAAe,CAAC;KACxB;IAED,IAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,aAAa,EAAE;QAClC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,gCAAgC,GAAG,UAAC,eAA6D;IAC5G,IAAI,OAAO,eAAe,KAAK,SAAS,EAAE;QACxC,OAAO,eAAe,CAAC;KACxB;IAED,IAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,gBAAgB,EAAE;QACrC,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,yBAAyB,GAAG,UAAC,eAA6D;IACrG,IAAI,OAAO,eAAe,KAAK,SAAS,EAAE;QACxC,OAAO,eAAe,CAAC;KACxB;IAED,IACE,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,SAAS,MAAK,IAAI;QACnC,CAAC,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,SAAS,KAAI,OAAO,eAAe,CAAC,SAAS,KAAK,QAAQ,CAAC,EAC7E;QACA,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,eAA6D;IACpG,IAAI,OAAO,eAAe,KAAK,SAAS,EAAE;QACxC,OAAO,eAAe,CAAC;KACxB;IAED,IAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,QAAQ,EAAE;QAC7B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,IAAM,yBAAyB,GAAG,UAAC,MAAsB;;IAC9D,IAAI,OAAO,GAAoC,CAAA,MAAA,MAAM,CAAC,WAAW,0CAAE,cAAc,EAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC;IAChH,IAAI,mBAAmB,GAA2C,SAAS,CAAC;IAC5E,IAAI,SAAS,GAAuB,WAAW,CAAC;IAEhD,IAAM,gCAAgC,GAAG,yBAAyB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IAC3F,IAAI,gCAAgC,EAAE;QACpC,OAAO,GAAG,SAAS,CAAC;QACpB,SAAS,GAAG,SAAS,CAAC;QAEtB,IACE,MAAM,CAAC,eAAe;YACtB,OAAO,MAAM,CAAC,eAAe,KAAK,QAAQ;YAC1C,MAAM,CAAC,eAAe,CAAC,SAAS;YAChC,OAAO,MAAM,CAAC,eAAe,CAAC,SAAS,KAAK,QAAQ,EACpD;YACA,IAAI,SAAS,IAAI,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE;gBACjD,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC;aACpD;YAED,IAAI,qBAAqB,IAAI,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE;gBAC7D,mBAAmB,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,mBAAmB,CAAC;aAC5E;YAED,IAAI,WAAW,IAAI,MAAM,CAAC,eAAe,CAAC,SAAS,IAAI,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAS,EAAE;gBACjG,SAAS,GAAG,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,SAAS,CAAC;aACxD;SACF;KACF;IAED,OAAO;QACL,OAAO,SAAA;QACP,mBAAmB,qBAAA;QACnB,SAAS,WAAA;KACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  BrowserOptions,\n  DefaultTrackingOptions,\n  PageTrackingHistoryChanges,\n  PageTrackingOptions,\n  PageTrackingTrackOn,\n} from '@amplitude/analytics-types';\n\nexport const isFileDownloadTrackingEnabled = (defaultTracking: DefaultTrackingOptions | boolean | undefined) => {\n  if (typeof defaultTracking === 'boolean') {\n    return defaultTracking;\n  }\n\n  if (defaultTracking?.fileDownloads) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const isFormInteractionTrackingEnabled = (defaultTracking: DefaultTrackingOptions | boolean | undefined) => {\n  if (typeof defaultTracking === 'boolean') {\n    return defaultTracking;\n  }\n\n  if (defaultTracking?.formInteractions) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const isPageViewTrackingEnabled = (defaultTracking: DefaultTrackingOptions | boolean | undefined) => {\n  if (typeof defaultTracking === 'boolean') {\n    return defaultTracking;\n  }\n\n  if (\n    defaultTracking?.pageViews === true ||\n    (defaultTracking?.pageViews && typeof defaultTracking.pageViews === 'object')\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const isSessionTrackingEnabled = (defaultTracking: DefaultTrackingOptions | boolean | undefined) => {\n  if (typeof defaultTracking === 'boolean') {\n    return defaultTracking;\n  }\n\n  if (defaultTracking?.sessions) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Returns page view tracking config\n *\n * if config.attribution.trackPageViews and config.defaultTracking.pageViews are both TRUE\n * then always track page views\n *\n * if config.attribution.trackPageViews is TRUE and config.defaultTracking.pageViews is FALSE\n * then only track page views on attribution\n *\n * if config.attribution.trackPageViews is FALSE and config.defaultTracking.pageViews is TRUE\n * then always track page views\n *\n * if config.attribution.trackPageViews and config.defaultTracking.pageViews are both FALSE\n * then never track page views\n */\nexport const getPageViewTrackingConfig = (config: BrowserOptions): PageTrackingOptions => {\n  let trackOn: PageTrackingTrackOn | undefined = config.attribution?.trackPageViews ? 'attribution' : () => false;\n  let trackHistoryChanges: PageTrackingHistoryChanges | undefined = undefined;\n  let eventType: string | undefined = 'Page View';\n\n  const isDefaultPageViewTrackingEnabled = isPageViewTrackingEnabled(config.defaultTracking);\n  if (isDefaultPageViewTrackingEnabled) {\n    trackOn = undefined;\n    eventType = undefined;\n\n    if (\n      config.defaultTracking &&\n      typeof config.defaultTracking === 'object' &&\n      config.defaultTracking.pageViews &&\n      typeof config.defaultTracking.pageViews === 'object'\n    ) {\n      if ('trackOn' in config.defaultTracking.pageViews) {\n        trackOn = config.defaultTracking.pageViews.trackOn;\n      }\n\n      if ('trackHistoryChanges' in config.defaultTracking.pageViews) {\n        trackHistoryChanges = config.defaultTracking.pageViews.trackHistoryChanges;\n      }\n\n      if ('eventType' in config.defaultTracking.pageViews && config.defaultTracking.pageViews.eventType) {\n        eventType = config.defaultTracking.pageViews.eventType;\n      }\n    }\n  }\n\n  return {\n    trackOn,\n    trackHistoryChanges,\n    eventType,\n  };\n};\n"]}