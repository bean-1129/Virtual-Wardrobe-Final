Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplitudeBrowser = void 0;
var tslib_1 = require("tslib");
var analytics_client_common_1 = require("@amplitude/analytics-client-common");
var analytics_core_1 = require("@amplitude/analytics-core");
var plugin_page_view_tracking_browser_1 = require("@amplitude/plugin-page-view-tracking-browser");
var plugin_web_attribution_browser_1 = require("@amplitude/plugin-web-attribution-browser");
var config_1 = require("./config");
var constants_1 = require("./constants");
var cookie_migration_1 = require("./cookie-migration");
var context_1 = require("./plugins/context");
var default_page_view_event_enrichment_1 = require("./plugins/default-page-view-event-enrichment");
var file_download_tracking_1 = require("./plugins/file-download-tracking");
var form_interaction_tracking_1 = require("./plugins/form-interaction-tracking");
var snippet_helper_1 = require("./utils/snippet-helper");
var AmplitudeBrowser = /** @class */ (function (_super) {
    tslib_1.__extends(AmplitudeBrowser, _super);
    function AmplitudeBrowser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeBrowser.prototype.init = function (apiKey, userId, options) {
        if (apiKey === void 0) { apiKey = ''; }
        return (0, analytics_core_1.returnWrapper)(this._init(tslib_1.__assign(tslib_1.__assign({}, options), { userId: userId, apiKey: apiKey })));
    };
    AmplitudeBrowser.prototype._init = function (options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _r, _s, _t, _u, _v, _w;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _x, _y, _z, legacyCookies, cookieStorage, previousCookies, queryParams, deviceId, sessionId, optOut, lastEventId, lastEventTime, userId, browserOptions, isNewSession, connector, webAttribution, pageViewTrackingOptions;
            var _this = this;
            return tslib_1.__generator(this, function (_0) {
                switch (_0.label) {
                    case 0:
                        // Step 0: Block concurrent initialization
                        if (this.initializing) {
                            return [2 /*return*/];
                        }
                        this.initializing = true;
                        // Step 1: Read cookies stored by SDK
                        _x = options;
                        if (!options.disableCookies) return [3 /*break*/, 1];
                        _y = '';
                        return [3 /*break*/, 5];
                    case 1:
                        if (!((_a = options.domain) !== null && _a !== void 0)) return [3 /*break*/, 2];
                        _z = _a;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, (0, config_1.getTopLevelDomain)()];
                    case 3:
                        _z = (_0.sent());
                        _0.label = 4;
                    case 4:
                        _y = _z;
                        _0.label = 5;
                    case 5:
                        // Step 1: Read cookies stored by SDK
                        _x.domain = _y;
                        return [4 /*yield*/, (0, cookie_migration_1.parseLegacyCookies)(options.apiKey, options)];
                    case 6:
                        legacyCookies = _0.sent();
                        return [4 /*yield*/, (0, config_1.createCookieStorage)(options)];
                    case 7:
                        cookieStorage = _0.sent();
                        return [4 /*yield*/, cookieStorage.get((0, analytics_client_common_1.getCookieName)(options.apiKey))];
                    case 8:
                        previousCookies = _0.sent();
                        queryParams = (0, analytics_client_common_1.getQueryParams)();
                        deviceId = (_d = (_c = (_b = options.deviceId) !== null && _b !== void 0 ? _b : queryParams.deviceId) !== null && _c !== void 0 ? _c : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.deviceId) !== null && _d !== void 0 ? _d : legacyCookies.deviceId;
                        sessionId = (_e = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.sessionId) !== null && _e !== void 0 ? _e : legacyCookies.sessionId;
                        optOut = (_g = (_f = options.optOut) !== null && _f !== void 0 ? _f : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.optOut) !== null && _g !== void 0 ? _g : legacyCookies.optOut;
                        lastEventId = (_h = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.lastEventId) !== null && _h !== void 0 ? _h : legacyCookies.lastEventId;
                        lastEventTime = (_j = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.lastEventTime) !== null && _j !== void 0 ? _j : legacyCookies.lastEventTime;
                        userId = (_l = (_k = options.userId) !== null && _k !== void 0 ? _k : previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.userId) !== null && _l !== void 0 ? _l : legacyCookies.userId;
                        this.previousSessionDeviceId = (_m = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.deviceId) !== null && _m !== void 0 ? _m : legacyCookies.deviceId;
                        this.previousSessionUserId = (_o = previousCookies === null || previousCookies === void 0 ? void 0 : previousCookies.userId) !== null && _o !== void 0 ? _o : legacyCookies.userId;
                        return [4 /*yield*/, (0, config_1.useBrowserConfig)(options.apiKey, tslib_1.__assign(tslib_1.__assign({}, options), { deviceId: deviceId, sessionId: sessionId, optOut: optOut, lastEventId: lastEventId, lastEventTime: lastEventTime, userId: userId, cookieStorage: cookieStorage }))];
                    case 9:
                        browserOptions = _0.sent();
                        return [4 /*yield*/, _super.prototype._init.call(this, browserOptions)];
                    case 10:
                        _0.sent();
                        isNewSession = false;
                        if (
                        // user has never sent an event
                        !this.config.lastEventTime ||
                            // user has no previous session ID
                            !this.config.sessionId ||
                            // has sent an event and has previous session but expired
                            (this.config.lastEventTime && Date.now() - this.config.lastEventTime > this.config.sessionTimeout)) {
                            this.setSessionId((_r = (_p = options.sessionId) !== null && _p !== void 0 ? _p : this.config.sessionId) !== null && _r !== void 0 ? _r : Date.now());
                            isNewSession = true;
                        }
                        connector = (0, analytics_client_common_1.getAnalyticsConnector)(options.instanceName);
                        connector.identityStore.setIdentity({
                            userId: this.config.userId,
                            deviceId: this.config.deviceId,
                        });
                        // Step 4: Install plugins
                        // Do not track any events before this
                        return [4 /*yield*/, this.add(new analytics_core_1.Destination()).promise];
                    case 11:
                        // Step 4: Install plugins
                        // Do not track any events before this
                        _0.sent();
                        return [4 /*yield*/, this.add(new context_1.Context()).promise];
                    case 12:
                        _0.sent();
                        return [4 /*yield*/, this.add(new analytics_client_common_1.IdentityEventSender()).promise];
                    case 13:
                        _0.sent();
                        if (!(0, analytics_client_common_1.isFileDownloadTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.add((0, file_download_tracking_1.fileDownloadTracking)()).promise];
                    case 14:
                        _0.sent();
                        _0.label = 15;
                    case 15:
                        if (!(0, analytics_client_common_1.isFormInteractionTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.add((0, form_interaction_tracking_1.formInteractionTracking)()).promise];
                    case 16:
                        _0.sent();
                        _0.label = 17;
                    case 17:
                        if (!!((_s = this.config.attribution) === null || _s === void 0 ? void 0 : _s.disabled)) return [3 /*break*/, 19];
                        webAttribution = (0, plugin_web_attribution_browser_1.webAttributionPlugin)({
                            excludeReferrers: (_t = this.config.attribution) === null || _t === void 0 ? void 0 : _t.excludeReferrers,
                            initialEmptyValue: (_u = this.config.attribution) === null || _u === void 0 ? void 0 : _u.initialEmptyValue,
                            resetSessionOnNewCampaign: (_v = this.config.attribution) === null || _v === void 0 ? void 0 : _v.resetSessionOnNewCampaign,
                        });
                        // For Amplitude-internal functionality
                        // if pluginEnabledOverride === undefined then use plugin default logic
                        // if pluginEnabledOverride === true then track attribution
                        // if pluginEnabledOverride === false then do not track attribution
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                        webAttribution.__pluginEnabledOverride =
                            isNewSession || ((_w = this.config.attribution) === null || _w === void 0 ? void 0 : _w.trackNewCampaigns) ? undefined : false;
                        return [4 /*yield*/, this.add(webAttribution).promise];
                    case 18:
                        _0.sent();
                        _0.label = 19;
                    case 19:
                        pageViewTrackingOptions = (0, analytics_client_common_1.getPageViewTrackingConfig)(this.config);
                        pageViewTrackingOptions.eventType = pageViewTrackingOptions.eventType || constants_1.DEFAULT_PAGE_VIEW_EVENT;
                        return [4 /*yield*/, this.add((0, plugin_page_view_tracking_browser_1.pageViewTrackingPlugin)(pageViewTrackingOptions)).promise];
                    case 20:
                        _0.sent();
                        return [4 /*yield*/, this.add((0, default_page_view_event_enrichment_1.defaultPageViewEventEnrichment)()).promise];
                    case 21:
                        _0.sent();
                        this.initializing = false;
                        // Step 6: Run queued dispatch functions
                        return [4 /*yield*/, this.runQueuedFunctions('dispatchQ')];
                    case 22:
                        // Step 6: Run queued dispatch functions
                        _0.sent();
                        // Step 7: Add the event receiver after running remaining queued functions.
                        connector.eventBridge.setEventReceiver(function (event) {
                            void _this.track(event.eventType, event.eventProperties);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeBrowser.prototype.getUserId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.userId;
    };
    AmplitudeBrowser.prototype.setUserId = function (userId) {
        if (!this.config) {
            this.q.push(this.setUserId.bind(this, userId));
            return;
        }
        if (userId !== this.config.userId || userId === undefined) {
            this.config.userId = userId;
            (0, analytics_client_common_1.setConnectorUserId)(userId, this.config.instanceName);
        }
    };
    AmplitudeBrowser.prototype.getDeviceId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.deviceId;
    };
    AmplitudeBrowser.prototype.setDeviceId = function (deviceId) {
        if (!this.config) {
            this.q.push(this.setDeviceId.bind(this, deviceId));
            return;
        }
        this.config.deviceId = deviceId;
        (0, analytics_client_common_1.setConnectorDeviceId)(deviceId, this.config.instanceName);
    };
    AmplitudeBrowser.prototype.setOptOut = function (optOut) {
        (0, analytics_client_common_1.setConnectorOptOut)(optOut, this.config.instanceName);
        _super.prototype.setOptOut.call(this, optOut);
    };
    AmplitudeBrowser.prototype.reset = function () {
        this.setDeviceId((0, analytics_core_1.UUID)());
        this.setUserId(undefined);
    };
    AmplitudeBrowser.prototype.getSessionId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionId;
    };
    AmplitudeBrowser.prototype.setSessionId = function (sessionId) {
        var _a;
        if (!this.config) {
            this.q.push(this.setSessionId.bind(this, sessionId));
            return;
        }
        // Prevents starting a new session with the same session ID
        if (sessionId === this.config.sessionId) {
            return;
        }
        var previousSessionId = this.getSessionId();
        var lastEventTime = this.config.lastEventTime;
        var lastEventId = (_a = this.config.lastEventId) !== null && _a !== void 0 ? _a : -1;
        this.config.sessionId = sessionId;
        this.config.lastEventTime = undefined;
        if ((0, analytics_client_common_1.isSessionTrackingEnabled)(this.config.defaultTracking)) {
            if (previousSessionId && lastEventTime) {
                this.track(constants_1.DEFAULT_SESSION_END_EVENT, undefined, {
                    device_id: this.previousSessionDeviceId,
                    event_id: ++lastEventId,
                    session_id: previousSessionId,
                    time: lastEventTime + 1,
                    user_id: this.previousSessionUserId,
                });
            }
            this.config.lastEventTime = this.config.sessionId;
            this.track(constants_1.DEFAULT_SESSION_START_EVENT, undefined, {
                event_id: ++lastEventId,
                session_id: this.config.sessionId,
                time: this.config.lastEventTime,
            });
        }
        this.previousSessionDeviceId = this.config.deviceId;
        this.previousSessionUserId = this.config.userId;
    };
    AmplitudeBrowser.prototype.extendSession = function () {
        if (!this.config) {
            this.q.push(this.extendSession.bind(this));
            return;
        }
        this.config.lastEventTime = Date.now();
    };
    AmplitudeBrowser.prototype.setTransport = function (transport) {
        if (!this.config) {
            this.q.push(this.setTransport.bind(this, transport));
            return;
        }
        this.config.transportProvider = (0, config_1.createTransport)(transport);
    };
    AmplitudeBrowser.prototype.identify = function (identify, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Identify(), queue);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.user_id) {
            this.setUserId(eventOptions.user_id);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.device_id) {
            this.setDeviceId(eventOptions.device_id);
        }
        return _super.prototype.identify.call(this, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.groupIdentify = function (groupType, groupName, identify, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Identify(), queue);
        }
        return _super.prototype.groupIdentify.call(this, groupType, groupName, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.revenue = function (revenue, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(revenue)) {
            var queue = revenue._q;
            revenue._q = [];
            revenue = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Revenue(), queue);
        }
        return _super.prototype.revenue.call(this, revenue, eventOptions);
    };
    AmplitudeBrowser.prototype.process = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentTime, lastEventTime, timeSinceLastEvent;
            return tslib_1.__generator(this, function (_a) {
                currentTime = Date.now();
                lastEventTime = this.config.lastEventTime || Date.now();
                timeSinceLastEvent = currentTime - lastEventTime;
                if (event.event_type !== constants_1.DEFAULT_SESSION_START_EVENT &&
                    event.event_type !== constants_1.DEFAULT_SESSION_END_EVENT &&
                    (!event.session_id || event.session_id === this.getSessionId()) &&
                    timeSinceLastEvent > this.config.sessionTimeout) {
                    this.setSessionId(currentTime);
                }
                return [2 /*return*/, _super.prototype.process.call(this, event)];
            });
        });
    };
    return AmplitudeBrowser;
}(analytics_core_1.AmplitudeCore));
exports.AmplitudeBrowser = AmplitudeBrowser;
//# sourceMappingURL=browser-client.js.map