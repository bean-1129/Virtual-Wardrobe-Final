{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../../src/storage/local-storage.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAIpE,IAAM,gBAAgB,GAAG,IAAI,CAAC;AAM9B;IAGE,sBAAY,MAA4B;QACtC,IAAI,CAAC,cAAc,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,CAAC;IAC/C,CAAC;IAEK,gCAAS,GAAf;;;;;;wBACE,wBAAwB;wBACxB,IAAI,CAAC,cAAc,EAAE,EAAE;4BACrB,sBAAO,KAAK,EAAC;yBACd;wBAEK,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;wBAC5B,WAAW,GAAG,IAAI,YAAY,EAAU,CAAC;wBACzC,OAAO,GAAG,UAAU,CAAC;;;;wBAEzB,qBAAM,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,EAAA;;wBAAtC,SAAsC,CAAC;wBACzB,qBAAM,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAA;;wBAAtC,KAAK,GAAG,SAA8B;wBAC5C,sBAAO,KAAK,KAAK,MAAM,EAAC;;;wBAExB,0BAA0B;wBAC1B,sBAAO,KAAK,EAAC;4BAEb,qBAAM,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAAA;;wBAAjC,SAAiC,CAAC;;;;;;KAErC;IAEK,0BAAG,GAAT,UAAU,GAAW;;;;;;;wBAEH,qBAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAA;;wBAA9B,KAAK,GAAG,SAAsB;wBACpC,IAAI,CAAC,KAAK,EAAE;4BACV,sBAAO,SAAS,EAAC;yBAClB;wBACD,+DAA+D;wBAC/D,sBAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAC;;;wBAEzB,0BAA0B;wBAC1B,sBAAO,SAAS,EAAC;;;;;KAEpB;IAEK,6BAAM,GAAZ,UAAa,GAAW;;;;gBACtB,sBAAO,CAAA,MAAA,cAAc,EAAE,0CAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAI,SAAS,EAAC;;;KACjE;IAEK,0BAAG,GAAT,UAAU,GAAW,EAAE,KAAQ;;;;;gBACvB,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;gBAEpF,IAAI;oBACI,eAAe,GAAG,mBAAmB;wBACzC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAM,CAAC;wBACvD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBAE1B,MAAA,cAAc,EAAE,0CAAE,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;iBAC9D;gBAAC,WAAM;oBACN,EAAE;iBACH;gBAED,IAAI,mBAAmB,EAAE;oBACjB,kBAAkB,GAAG,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;oBAC3D,MAAA,IAAI,CAAC,cAAc,0CAAE,KAAK,CACxB,yBAAkB,kBAAkB,uDAA6C,gBAAgB,MAAG,CACrG,CAAC;iBACH;;;;KACF;IAEK,6BAAM,GAAZ,UAAa,GAAW;;;;gBACtB,IAAI;oBACF,MAAA,cAAc,EAAE,0CAAE,YAAY,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBAChD;gBAAC,WAAM;oBACN,EAAE;iBACH;;;;KACF;IAEK,4BAAK,GAAX;;;;gBACE,IAAI;oBACF,MAAA,cAAc,EAAE,0CAAE,YAAY,CAAC,KAAK,EAAE,CAAC;iBACxC;gBAAC,WAAM;oBACN,EAAE;iBACH;;;;KACF;IACH,mBAAC;AAAD,CAAC,AAlFD,IAkFC","sourcesContent":["import { getGlobalScope } from '@amplitude/analytics-client-common';\nimport { Storage } from '@amplitude/analytics-types';\nimport { Logger } from '@amplitude/analytics-types';\n\nconst MAX_ARRAY_LENGTH = 1000;\n\ninterface LocalStorageOptions {\n  loggerProvider?: Logger;\n}\n\nexport class LocalStorage<T> implements Storage<T> {\n  loggerProvider?: Logger;\n\n  constructor(config?: LocalStorageOptions) {\n    this.loggerProvider = config?.loggerProvider;\n  }\n\n  async isEnabled(): Promise<boolean> {\n    /* istanbul ignore if */\n    if (!getGlobalScope()) {\n      return false;\n    }\n\n    const random = String(Date.now());\n    const testStorage = new LocalStorage<string>();\n    const testKey = 'AMP_TEST';\n    try {\n      await testStorage.set(testKey, random);\n      const value = await testStorage.get(testKey);\n      return value === random;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    } finally {\n      await testStorage.remove(testKey);\n    }\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    try {\n      const value = await this.getRaw(key);\n      if (!value) {\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(value);\n    } catch {\n      /* istanbul ignore next */\n      return undefined;\n    }\n  }\n\n  async getRaw(key: string): Promise<string | undefined> {\n    return getGlobalScope()?.localStorage.getItem(key) || undefined;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    const isExceededArraySize = Array.isArray(value) && value.length > MAX_ARRAY_LENGTH;\n\n    try {\n      const serializedValue = isExceededArraySize\n        ? JSON.stringify(value.slice(0, MAX_ARRAY_LENGTH) as T)\n        : JSON.stringify(value);\n\n      getGlobalScope()?.localStorage.setItem(key, serializedValue);\n    } catch {\n      //\n    }\n\n    if (isExceededArraySize) {\n      const droppedEventsCount = value.length - MAX_ARRAY_LENGTH;\n      this.loggerProvider?.error(\n        `Failed to save ${droppedEventsCount} events because the queue length exceeded ${MAX_ARRAY_LENGTH}.`,\n      );\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      getGlobalScope()?.localStorage.removeItem(key);\n    } catch {\n      //\n    }\n  }\n\n  async reset(): Promise<void> {\n    try {\n      getGlobalScope()?.localStorage.clear();\n    } catch {\n      //\n    }\n  }\n}\n"]}