{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/cookie-migration/index.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAC;AACtE,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;AAElE,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAO,MAAc,EAAE,OAAuB;;;;;oBAC9D,qBAAM,mBAAmB,CAAS,OAAO,CAAC,EAAA;;gBAApD,OAAO,GAAG,SAA0C;gBACpD,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAC/B,qBAAM,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,EAAA;;gBAA7C,OAAO,GAAG,SAAmC;gBAEnD,IAAI,CAAC,OAAO,EAAE;oBACZ,sBAAO;4BACL,MAAM,EAAE,KAAK;yBACd,EAAC;iBACH;qBAEG,CAAA,MAAA,OAAO,CAAC,aAAa,mCAAI,gBAAgB,EAAE,CAAC,aAAa,CAAA,EAAzD,wBAAyD;gBAC3D,qBAAM,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,EAAA;;gBAAnC,SAAmC,CAAC;;;gBAEhC,KAAA,OAAoE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAA,EAArF,QAAQ,QAAA,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,SAAS,QAAA,EAAE,aAAa,QAAA,EAAE,WAAW,QAAA,CAAuB;gBAC7F,sBAAO;wBACL,QAAQ,UAAA;wBACR,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;wBACtB,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC;wBAC/B,WAAW,EAAE,SAAS,CAAC,WAAW,CAAC;wBACnC,aAAa,EAAE,SAAS,CAAC,aAAa,CAAC;wBACvC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;qBACxB,EAAC;;;KACH,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,GAAW;IACnC,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAClC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,KAAc;IACnC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;QAC9B,OAAO,SAAS,CAAC;KAClB;IACD,IAAI;QACF,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAChD;IAAC,WAAM;QACN,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC","sourcesContent":["import { BrowserOptions, UserSession } from '@amplitude/analytics-types';\nimport { getOldCookieName } from '@amplitude/analytics-client-common';\nimport { createCookieStorage, getDefaultConfig } from '../config';\n\nexport const parseLegacyCookies = async (apiKey: string, options: BrowserOptions): Promise<UserSession> => {\n  const storage = await createCookieStorage<string>(options);\n  const oldCookieName = getOldCookieName(apiKey);\n  const cookies = await storage.getRaw(oldCookieName);\n\n  if (!cookies) {\n    return {\n      optOut: false,\n    };\n  }\n\n  if (options.cookieUpgrade ?? getDefaultConfig().cookieUpgrade) {\n    await storage.remove(oldCookieName);\n  }\n  const [deviceId, userId, optOut, sessionId, lastEventTime, lastEventId] = cookies.split('.');\n  return {\n    deviceId,\n    userId: decode(userId),\n    sessionId: parseTime(sessionId),\n    lastEventId: parseTime(lastEventId),\n    lastEventTime: parseTime(lastEventTime),\n    optOut: Boolean(optOut),\n  };\n};\n\nexport const parseTime = (num: string) => {\n  const integer = parseInt(num, 32);\n  if (isNaN(integer)) {\n    return undefined;\n  }\n  return integer;\n};\n\nexport const decode = (value?: string): string | undefined => {\n  if (!atob || !escape || !value) {\n    return undefined;\n  }\n  try {\n    return decodeURIComponent(escape(atob(value)));\n  } catch {\n    return undefined;\n  }\n};\n"]}